// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
  CLIENT
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CLIENT)
  organizationId String?   @db.ObjectId
  
  accounts      Account[]
  sessions      Session[]
  organization  Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  
  // Relations for tasks and documents
  assignedTasks Task[]    @relation("AssignedTo")
  createdTasks  Task[]    @relation("CreatedBy")
  uploadedDocuments Document[] @relation("UploadedBy")
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Organization {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String    @unique
  logo          String?
  users         User[]
  clients       Client[]
  documents     Document[]
  tasks         Task[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Client {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String
  phone         String?
  address       String?
  notes         String?
  organizationId String    @db.ObjectId
  
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  documents     Document[]
  tasks         Task[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum DocumentStatus {
  DRAFT
  SHARED
  ARCHIVED
}

model Document {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  fileUrl       String
  fileType      String
  fileSize      Int
  status        DocumentStatus @default(DRAFT)
  tags          String[]
  
  organizationId String    @db.ObjectId
  uploadedById  String    @db.ObjectId
  clientId      String?   @db.ObjectId
  
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  uploadedBy    User      @relation("UploadedBy", fields: [uploadedById], references: [id], onDelete: Cascade)
  client        Client?   @relation(fields: [clientId], references: [id], onDelete: SetNull)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  status        TaskStatus @default(TODO)
  priority      TaskPriority @default(MEDIUM)
  dueDate       DateTime?
  
  organizationId String    @db.ObjectId
  createdById   String    @db.ObjectId
  assignedToId  String?   @db.ObjectId
  clientId      String?   @db.ObjectId
  
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy     User      @relation("CreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  assignedTo    User?     @relation("AssignedTo", fields: [assignedToId], references: [id], onDelete: SetNull)
  client        Client?   @relation(fields: [clientId], references: [id], onDelete: SetNull)
  comments      Comment[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Comment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  taskId        String    @db.ObjectId
  userId        String    @db.ObjectId
  
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

